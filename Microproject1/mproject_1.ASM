 ; ВАРИАНТ 25
 ; Разработать программу, которая вычисляет количество цифр и букв в заданной ASCII-строке
 ;


format PE console
entry start

include 'win32a.inc'

section '.data' readable writable

        letterCount      dd 0
        numberCount      dd 0
        inputString      rb 4096 ; Переменная для хранения строки, введённой пользователем.

        scanString       db "%s", 0
        startString      db 'Write a string: ', 0
        strShowInp       db 'Input string: %s', 10, 0
        resultString     db 'Numbers: %d, Letters: %d', 10, 0

;--------------------------------------------------------------------------

section '.code' readable executable

start:

       call input ; Получение строки от пользователя.
       stdcall processString, inputString ; Подсчёт букв и чисел в строке.
       call printRes ; Вывод результата и завершение работы программы.


finish:

        call[getch] ; Ожидание пока пользователь не введёт символ для завершения программы.
        push 0
        call [ExitProcess]

;--------------------------------------------------------------------------

; Здесь происходит считывание пользовательского ввода.
input:
        push startString
        call [printf] ; Просим пользователя ввести строку.
        add esp, 4 ; Очищаем стек.

        push inputString
        push scanString
        call[scanf] ; Считываем строку с консоли.
        add esp, 8 ; Очищаем стек.

        push inputString ; Помещаем переменную, содержащю строку, в стек.
        push strShowInp ; Помещаем в стек строку для вывода.
        call[printf] ; Вывод строки, введённой пользователем.
        add esp, 8


        ret ; Возвращаемся в start.

; В этом методе происход подсчёт цифр и букв в строке.
processString:
       mov esi, [esp+4] ; Помещаем адрес строки в esi.
       xor ebx, ebx ; Зануляем регистр ebx.
       xor ecx, ecx ; Зануляем регистр ecx.

; Цикл производит проверку элементов строки и подсчёт цифр и букв в ней.
.loop:
       mov dl, [esi] ; Заносим значение элемента строки в dl.
       cmp dl, 0
       jz .end  ; Если элемент равен 0, значит дошли до конца строки.

       cmp dl, '0' ; Сравниваем код символа 0 с элементом строки.
       jb .notLetter ; Если код элемента меньше, это не цифра. Проверяем дальше.
       cmp dl, '9'  ; Сравниваем код символа 9 с элементом строки.
       ja .notdigit ; Если код элемента больше, это не цифра. Проверяем дальше.
       inc ebx ; Если прошло все предыдущие условие, значит это цифра.
       jmp .notLetter ; Не буква.

; Переход сюда осуществляется, если не была пройдена проверка на то, что элемент строки - это цифра.
.notdigit:
       cmp dl, 'A' ; Сравниваем код символа А с элементом строки.
       jb .notLetter ; Если код элемента меньше, это не заглавная буква. Завершаем проверку этого элемента.
       cmp dl, 'Z' ; Сравниваем код символа Z с элементом строки.
       ja .notuppercase ; Если код элемента больше, это не заглавная буква. Завершаем проверку этого элемента.
       inc ecx ; Если пройдены все проверки - это заглавная буква. Увеличиваем счётчик.

; Переход сюда осуществляется, если не была пройдена пройдена проверка на заглавную букву.
.notuppercase:
        cmp dl, 'a'  ; Сравниваем код символа а с элементом строки.
        jb .notLetter ; Если код символа строки меньше - это не буква. Завершаем проверку данного символа.
        cmp dl, 'z'  ; Сравниваем код символа z с элементом строки.
        ja .notLetter  ; Если код символа строки больше - это не буква. Завершаем проверку данного символа.
        inc ecx ; Если пройдены все проверки - это буква. Увеличиваем счётчик.

; Этот код выполняется, если символ строки не буква и не цифра.
.notLetter:
        inc esi ; Увеличиваем индекс элемента строки.
        jmp .loop ; Продолжаем работу цикла.

; Завершение проверки строки.
.end:
        ret ; Переходим к выводу результата.

; Здесь осуществляется вывод результата.
printRes:
        push ecx  ; Заносим в стек счётчик букв.
        push ebx  ; Заносим в стек счётчик цифр.
        push resultString ; Заносим в стек строку для вывода.
        call [printf] ; Вывод результата.
        jmp finish ; Завершаем работу программы.

;-------------------------------third act - including HeapApi--------------------------

section '.idata' import data readable
    library kernel, 'kernel32.dll',\
            msvcrt, 'msvcrt.dll',\
            user32,'USER32.DLL'

include 'api\user32.inc'
include 'api\kernel32.inc'
    import kernel,\
           ExitProcess, 'ExitProcess',\
           HeapCreate,'HeapCreate',\
           HeapAlloc,'HeapAlloc'
  include 'api\kernel32.inc'
    import msvcrt,\
           printf, 'printf',\
           scanf, 'scanf',\
           getch, '_getch'